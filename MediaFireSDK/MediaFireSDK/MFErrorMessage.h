//
//  MFErrorMessage.h
//  MediaFireSDK
//
//  Created by Daniel Dean on 8/6/13.
//  Copyright (c) 2013 MediaFire. All rights reserved.
//

#import <Foundation/Foundation.h>

#define erm(ErrorMessageType) [MFErrorMessage log:[MFErrorMessage ErrorMessageType] in:__FILE__ at:__LINE__]

@interface MFErrorMessage : NSObject

/**
 @brief Returns true if the supplied error object is an error message generated by the MFErrorMessage class.
 */
+ (BOOL)isErrorMessage:(NSDictionary*)object;
/**
 @brief Returns true if the supplied error object is the result of a credentials authentication error.
 */
+ (BOOL)isAuthenticationError:(NSDictionary*)object;
/**
 @brief Gets the error code from an error message dictionary.
 */
+ (NSInteger)code:(NSDictionary*)errorObject;
/**
 @brief Gets the category code from an error message dictionary.
 */
+ (NSInteger)category:(NSDictionary*)errorObject;
/**
 @brief Gets the message string from an error message dictionary.
 */
+ (NSString*)message:(NSDictionary*)errorObject;
/**
 @brief Returns an error message dictionary for a null dictionary.
 */
+ (NSDictionary*)NullDictionary;
/**
 @brief Returns an error message dictionary for a null callback.
 */
+ (NSDictionary*)NullCallback;
/**
 @brief Returns an error message dictionary for a null url.
 */
+ (NSDictionary*)nullURL;
/**
 @brief Returns an error message dictionary for most API error responses.
 */
+ (NSDictionary*)badResponse:(NSDictionary*)response;
/**
 @brief Returns an error message dictionary for an unknown bad response.
 */
+ (NSDictionary*)badHTTP:(NSInteger)status message:(id)response;
/**
 @brief Returns an error message dictionary for when a user has exceeded their storage limit.
 */
+ (NSDictionary*)storageLimitExceeded;
/**
 @brief Returns an error message dictionary for a response that was unexpected, ie a success response with an http code 400.
 */
+ (NSDictionary*)unexpectedResponse:(id)response message:(NSString*)msg;
/**
 @brief Returns an error message dictionary for an unreachable url
 */
+ (NSDictionary*)noResponseTo:(NSURL*)url;
/**
 @brief Returns an error message dictionary for when API calls are attempted before a session is established.
 */
+ (NSDictionary*)noCurrentSession;
/**
 @brief Returns an error message dictionary for when an attempt is made to authenticate before credentials have been stored.
 */
+ (NSDictionary*)noCredentials;
/**
 @brief Returns an error message dictionary for when API calls are attempted after the session has been closed.
 */
+ (NSDictionary*)sessionClosed;
/**
 @brief Returns an error message dictionary for a request that is missing parameters or has incorrectly specified parameters.
 */
+ (NSDictionary*)badRequestFormat;
/**
 @brief Returns an error message dictionary for any null field.
 */
+ (NSDictionary*)nullField;
/**
 @brief Returns an error message dictionary for a user specified null field.
 */
+ (NSDictionary*)nullField:(NSString*)fieldName;
/**
 @brief Returns an error message dictionary for a user specified invalid field.
 */
+ (NSDictionary*)invalidField:(NSString*)fieldName;
/**
 @brief Returns an error message dictionary for a mismatch on resumable upload bitmaps.
 */
+ (NSDictionary*)bitmapError;
/**
 @brief Returns an error message dictionary for a token in an undefined or unexpected state.
 */
+ (NSDictionary*)badTokenState;
/**
 @brief Returns an error message dictionary for when an attempt to get a session token has failed.
 */
+ (NSDictionary*)obtainTokenFailure:(NSDictionary*)response;
/**
 @brief Returns an error message for when an operation is cancelled.
 */
+ (NSDictionary*)cancelled;
/**
 @brief Returns an error message dictionary for when the maximum number of upload polls has been exceeded.
 */
+ (NSDictionary*)maxPolls;
/**
 @brief Returns an error message dictionary for when an attempt to copy a temp file to a local path has failed.
 */
+ (NSDictionary*)fileCopyFailed;

/**
 @brief Logs a message with reference to the file and line number in which the log originated.
 */
+ (NSDictionary*)log:(NSDictionary*)errorMessage in:(const char*)srcfile at:(NSUInteger)line;

@end

/**
 @brief The category codes of error messages.
 */
enum ErrorCategory {
    ERRCAT_APP      = 9001, // internal application error
    ERRCAT_CLOUD    = 9002, // HTTP error
    ERRCAT_NET      = 9003, // network error
    ERRCAT_API      = 9004, // REST API error
    ERRCAT_UNKNOWN  = 9999  // unknown error
};

/**
 @brief The error codes of error messages.
 */
enum ErrorCode {
    // APP errors
    ERRCODE_BAD_TOKEN_STATE     = 40000,    // Token was locked or unlocked erroneously
    ERRCODE_OBTAIN_TOKEN_FAIL   = 41000,    // Unable to get a new token.
    ERRCODE_NULL_DICTIONARY     = 50000,    // Non-nil dictionary required
    ERRCODE_NULL_CALLBACK       = 51000,    // Non-nill callback required
    ERRCODE_NULL_URL            = 51100,    // Non-nil URL required
    ERRCODE_NO_CREDENTIALS      = 52107,    // credentials null or invalid
    ERRCODE_NO_CURRENT_SESSION  = 52108,    // Tried to execute API without login
    ERRCODE_BAD_FORMAT          = 52800,    // bad request format
    ERRCODE_SESSION_CLOSED      = 52900,    // session has been closed
    ERRCODE_NULL_FIELD          = 53000,    // Non-nil string or number required.
    ERRCODE_INVALID_FIELD       = 53100,    // Invalid string or number required.
    ERRCODE_FILECOPY            = 58000,    // Failed to copy a temp file to local path.
    ERRCODE_CANCELLED           = 59000,    // An operation was cancelled.
    ERRCODE_MAX_POLLS           = 59100,    // Exceeded maximum poll_upload attempts.
    ERRCODE_BITMAP              = 59200,    // An error occurred with a bitmap operation.
    
    // CLOUD errors
    ERRCODE_HTTP_BASE = 60000,
    // network errors
    ERRCODE_NETWORK_BASE = 70000,
    // REST response errors
    ERRCODE_API_ERROR                   = 80000,
    ERRCODE_INTERNAL_SERVER_ERROR       = 80100,
    ERRCODE_MISSING_PARAMETERS          = 80102,
    ERRCODE_INVALID_PARAMETERS          = 80103,
    ERRCODE_INVALID_SESSION_TOKEN       = 80105,
    ERRCODE_INVALID_CREDENTIALS         = 80107,
    ERRCODE_INVALID_SIGNATURE           = 80127,
    ERRCODE_STORAGE_LIMIT_EXCEEDED      = 80108,
    ERRCODE_UNRECOGNIZED_API_RESPONSE   = 81000,
    ERRCODE_UNKNOWN                     = 99999
};

